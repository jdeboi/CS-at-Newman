% Chapter 1

\chapter{Research} % Main chapter title

\label{Chapter1} % For referencing the chapter elsewhere, use \ref{Chapter1} 

\lhead{Chapter 1. \emph{Research}} % This is for the header on each page - perhaps a shortened title

%----------------------------------------------------------------------------------------

\section{Case Studies}
\subsection{Independent Schools}
\textbf{INDEX Schools} \\
INDEX Schools is a collaboration of over 100 independent schools to ``to share data, analysis, research, and information to aid member schools in decision-making, policy development, and strategic planning" \cite{index}. At the beginning of the 2015 school year, the Assistant Head of Newman emailed the INDEX listserv to request any curriculum outlines or standards and benchmarks for PK-12 computer science that schools might be willing to share. The results of the query are captured in a Google Spreadsheet that can be accessed here: \par

\textbf{Fort Worth Country Day School} \\
Fort Worth Country Day (FWCD) is an independent, coeducational K-12 school in Fort Worth, Texas with a total enrollment of over 1110. Three Newman faculty members toured the school in February of 2016 to observe their CS program. Their Upper School CS sequence progresses as follows: 
\begin{itemize}
	\item 9th: Media Projects or AppInventor
	\item 10th: Art and Code with Processing
	\item 11th: AP CS A with Java
	\item 12th: Data Structures with Java
\end{itemize}
The US uses a block schedule. Classes meet for 75 minutes every other day for one semester. CS courses are treated as general electives, with the exception of “Art and Code,” which satisfies a fine arts credit. \par
There is no US CS requirement at FWCD. Media Projects is currently one section, there are two sections of Art and Code, one section of AP CS, and beginning next year, one section of data structures. With the exception of the introductory course, all CS classes are covered by one faculty member with a computer science background. \par
``Art and Code'' is a prime example of a course that emphasizes the creative capacity of coding. The course is taught in Processing, a visual programming language based on Java that is designed for artists. The teacher, Aaron Cadle, blends his own curriculum with content, labs, and projects developed by Darby Thompson’s, a CS teacher at Sidwell Friends School in Washington D.C. who has developed a project-based introductory CS course. During the observation, Aaron tested student’s understanding of abstract classes using a “Fish Tank” project. Students coded their own interactive, colorful fish that were placed on display in the library, and students outside of the course could vote on their favorite fish. \par
For AP CS Aaron relies on the \href{http://apluscompsci.com/}{A+ Computer Science curriculum}, which includes worksheets, labs, tests, slides, and notes. During the observation, students pulled personally-relevant datasets from data.gov (baseball stats, Powerball numbers, Hilary Clinton emails, etc.) and explored meaningful ways analyze the data using Java (e.g. finding the most common Powerball numbers). Aaron reversed the typical AP structure (lecture in class, worksheets for homework) in order to devote more time to workshopping labs. Students watch short (5 min) instructional videos for homework and work on labs in class. \par
The upper-level CS course, Data Structures, is project based. The course is taught in Java and uses the XBox Kinect. Aaron uses the book, “Making Things See” by Greg Borenstein, which explores the use of Arduinos, Processing, and the Kinect to develop interactive programs. \par
As for Middle School, coding exposure is currently limited to a two week HTML project that is integrated into 7th grade science. A newly hired Middle School iPad Coordinator, brought on to organize the division's one-to-one iPad program, is working to bolster computer literacy across campus. She currently uses 5th and 6th grade advisory time to teach digital citizenship, email etiquette, and Google Classroom. She is also developing curriculum for a required MS technology/computer literacy elective that may be offered next year. When asked about curriculum standards, she pointed to ISTE benchmarks. \par
Lower School computer science exposure at FWCD is very similar to Newman's. A ``Computer Special" offered to grades K-4 meets for 40 minutes every 1 out of 6 days. The class takes place in the ``lab" - a proto-makerspace/ design thinking workshopping space. The special explores engineering exercises, programmable hardware (Sphero, LittleBits, Lego robotics, etc.), and coding (ScratchJr and Kodable). FWCD has never taught keyboarding; instead they direct interested parents/students to online resources. At one point the computer teacher, Mandy Lofquist, maintained a ``technology checklist" of all the computing skills her students should acquire, although she hasn't relied on this list since her students started coding. \par


\textbf{Greenhill} \\
Greenhill School, a PK-12 coeducational private day school outside of Dallas, Texas, has an enrollment over 1200. This is another school that Newman faculty members toured in February, 2016 to observe their curriculum and classrooms. The Director of Technology, Chris Bigenho, has been researching computer science programs and developing K-12 CS curriculum for the last five years. Emphasis on aligning the program across divisions and with national standards has led to the current implementation, which is one of the more advanced programs in the INDEX schools consortium. \par 
The Upper School CS program is a three-tier, two year sequence. Students may take multiple courses from each tier (each a semester long course). There is a 1 trimester CS graduation requirement. The courses include:
\begin{itemize} 
	\item CS1: Introduction to CS with Arduino
	\item CS1: Beginning JAVA Programming 
	\item CS1: Introduction to Game Design 
	\item CS1: Engineering
	\item CS2: Advanced Computational Design
	\item CS2: Intermediate JAVA Programming
	\item CS3: Advanced Topics in Computer (prepares students for AP)
\end{itemize}
Greenhill’s Middle School courses are broken into trimesters and rotate every 6 days. Classes meet for approximately 50 minutes. One block of the schedule is split between two electives; each meets every other day corresponding to ACE or BDF blocks. Band and choir may meet during ACE the entire year, while 2D or 3D art meets for a single semester during BDF. \par
Greenhill offers two required electives, ``Exploratory Design,'' that blend coding (Scratch, Arduino) with engineering design challenges. An example project includes prototyping, 3D printing, and testing a hub and blades for a wind turbine. The coding sequence is as follows:
\begin{itemize}
	\item 5th grade - Exploratory Design (required)
	\item 6th grade - Exploratory Design (required)
	\item 7th/8th grade - Prototyping 1 (optional elective)
	\item 7th/8th grade - Prototyping 2 (proposed optional elective)
	\item 7th/8th grade - Game Design (proposed optional elective)
\end{itemize}
After Exploratory Design, the electives are no longer required. Prototyping I is an optional 7th and 8th grade “arts” elective that meets every other day for one trimester. Students work through “Arduino Projects,” a project book of 10+ exercises that introduce Arduino, servos, LEDs, and other simple circuits. \par
Now that Greenhill has an introductory CS course at the US level, the plan (discussed by both the MS head and the director of technology) is to consider making a CS course required in 7th and 8th grades. \par
The LS exposure takes place in 2nd - 4th grades in Computer 2, 3, and 4. These courses are a mix of computer literacy and coding (Microworlds), which is likely to change now that the computer teacher is retiring.

\subsection{Public High Schools}
Examining the top fifteen public high STEM schools, as ranked by the U.S. News in 2015 \cite{usnews}, provides insight into the state of computer science in some of the nation's top STEM high schools. Roughly 3/4th of the list's top 15 schools offered at least one CS course, significantly more than the national average cited by Gallup of 1 in 4 U.S. schools \cite{gallup}. About half of these schools offered a basic (no requirement, strictly elective) computer science sequence: an introductory CS course (frequently in Java), followed by the AP CS course. Four of the 15 schools had a robust, scaffolded CS sequence; these schools are examined below. \par
\textbf{Thomas Jefferson High School for Science and Technology} \\
Thomas Jefferson High School for Science and Technology (TJ) is ranked \#2 on U.S. News' STEM report. A ``regional Governor's school" in Virginia with 1,846 enrolled students, TJ offers five years of Computer Science. There is a one credit CS graduation requirement that ``most students satisfy by taking Foundations of Computer Science in 9th grade during the summer" \cite{tjreq}. Additional courses (\href{https://www.tjhsst.edu/research-academics/math-cs/computer-science/docs/FlowCS1516.pdf}{the sequence for which can be found on their website}) include: AP Computer Science and Data Structures, Artificial Intelligence 1 \& 2, Parallel Computing 1 \& 2, Mobile App Development, Web App Development, and Mobile/Web Application Development Lab.\par
Thomas Jefferson HS's overall graduation requirements are listed in Table \ref{tjtable}. Computer science courses, including the graduation requirement, fall under ``electives." It's important to note that TJ's graduation requirements are largely similar to Newman's. \par
\begin{table}[]
\centering
\caption{Thomas Jefferson High School Graduation Requirements \cite{tjreq}}
\label{tjtable}
\begin{tabular}{lc}
\textbf{Subject}       & \textbf{Required Credits} \\ \hline
English                & 4                     \\
Math                   & 4                     \\
Science                & 4                     \\
History/Social Studies & 4                     \\
World Language         & 3                     \\
Health/PE              & 2                     \\
Fine Arts              & 1                     \\
Economics/Personal Finance              & 1                     \\ 
Electives              & 3                     \\
\textbf{Total}         & \textbf{26}          
\end{tabular}
\end{table}
\textbf{Stuyvesant High School} \\
Stuyvesant High School, a nationally-ranked New York City public high school with 3,285 students, ranked 14th on the U.S. News' top STEM schools. Stuyvesant offers 6 active CS courses that are listed through the math department. Although none of the CS courses satisfy the 4-sequence math requirement, students are required to take a single semester ``Introduction to Computer Science." In the introductory course, 
\begin{blockquote}``Students will study some the basic themes and subfields of computer science including algorithms and programming, simulation, networking, computability, graphics, and artificial intelligence. Students will also be given a solid foundation in working in a modern networked computer environment. This is a required course beginning with the Class of 2007. Students will take the course either in the Fall or Spring term of their sophomore year" \cite{stuy}.
\end{blockquote} 
Additional CS courses offered to high school students include: AP Computer Science, System Level Programming, Computer Graphics, Software Development, and Computer Science Intel Research. \par
\textbf{High Technology High School} \\
High Technology High School (HTHS) in Lincroft, New Jersey, has an enrollment of 280 and is ranked \#1 in U.S. News' top STEM schools. HTHS is relatively unique for its strong integration of technology and programming into engineering courses. CS courses include: Computer Programming for Engineers, Computer Science \& Software Engineering, and Digital Electronics \cite{hths}. \par
\textbf{Edison Academy for Science, Mathematics, and Engineering Technologies} \\
The Academy for Science, Mathematics, and Engineering Technologies, a magnet school located in Edison, New Jersey, has a total enrollment of 161 students and is ranked \#4 in the U.S. News top STEM public high schools \cite{usnews}. \par
The high school operates on a rotating block schedule; all classes meet Monday for one period, and classes meet on either Tuesdy/Thursday or Wednesday/Friday for two periods (88 minutes). Engineering courses, however, meet every day of the week. Students enroll in either the ``civil and mechanical" or ``electronics and computer engineering" track. The requirements for the Electronics and Computer Engineering Technology (ECET) Program are listed in Table \ref{ecet}. \par
 \begin{table}[]
 \centering
 \caption{Edison Academy: Electronics and Computer Engineering Technology (ECET) Program of Study \cite{edisonacad}}
 \label{ecet}
 \begin{tabular}{|l|l|}
 \hline
 \multirow{4}{*}{9}  & Introduction to Engineering  \\ \cline{2-2} 
                     & Introduction to Digital Logic \\ \cline{2-2} 
                     & Introduction to Computer Science Using C++  \\ \cline{2-2} 
                     & DC Circuit Analysis \\ \hline
 \multirow{5}{*}{10} & Integrated Circuit Logic Families  \\ \cline{2-2} 
                     & Sequential Logic Circuits \\ \cline{2-2} 
                     & Finite State Machines (FSM) \\ \cline{2-2} 
                     & Interfacing to the analog world \\ \cline{2-2} 
                     & Microcontrollers / Assembly language \\ \hline
 \multirow{4}{*}{11} & Object Oriented Programming Using C++  \\ \cline{2-2} 
                     & AC Circuit Analysis \\ \cline{2-2} 
                     & Electronic Communication Systems \\ \cline{2-2} 
                     & Digital Communication Systems \\ \hline
 \multirow{2}{*}{12} & Senior Project \\ \cline{2-2} 
                     & Programming with JAVA \\ \hline
 \end{tabular}
 \end{table}
 %---------------------
\textbf{Westside Magnet High School for Integrated Technology} \\
Although Westside Magnet High School for Integrated Technology, did not make U.S. News' list of top 15 public STEM schools, its robust CS program warrants attention. The magnet school in Houston, Texas, gives students the option to choose one of five strands in business, computing sciences and engineering, fine arts, health science and technology, or media. The school reportedly uses the four year engineering curriculum developed by \href{https://www.pltw.org/}{Project Lead the Way} \cite{westside}. \par
Students who choose the Computing Sciences and Engineering strand choose between one of three programs: Computer Programming, Computer Maintenance, and Engineering. Each program is an individually designed; a typical four year schedule is detailed in Table \ref{westsidesched}. ``Magnet courses" (specific to the Computing Sciences and Engineering strand) are outlined in Table \ref{westsidemag}. 
\begin{table}[]
\centering
\caption{Four Year Plan for Westside HS Computing Sciences and Engineering \cite{westside}}
\label{westsidesched}
\begin{tabular}{|l|l|l|l|}
	 \hline
\textbf{9th}     & \textbf{10th}        & \textbf{11th}         & \textbf{12th}               \\ \hline
English          & English              & AP Language           & AP Literature               \\ \hline
Algebra/Geometry & Geometry/ Algebra II & Alga. II/Pre-Calculus & Pre-Calculus/Calculus       \\ \hline
World Geography/ & World History        & U S History           & Go/Economics                \\ \hline
Biology          & Chemistry            & Physics               & AP Science/Elective Science \\ \hline
Foreign Language & Foreign Language     & Foreign Language      & Health/Speech               \\ \hline
\rowcolor[HTML]{FFCC67} Magnet Course   & Magnet Course        & Magnet Course         & Magnet Course   \\ \hline
Fine Arts Credit & PE                   & Elective              & Elective					  \\ \hline                   
\end{tabular}
\end{table}


\begin{table}[]
	\centering
	\footnotesize
	\caption{Westside HS Computing Sciences and Engineering Magnet Courses \cite{westside}}
	\label{westsidemag}
	\begin{tabular}{|p{3.5cm}|p{3.5cm}|p{3.5cm}|p{3.5cm}|}
		\hline
	\textbf{9th}     & \textbf{10th}        & \textbf{11th}         & \textbf{12th}               \\ \hline
Principles of Information Technology/ Principles of Art, A/V Technology and Communication & Pre-AP Computer Science 1 (Python) or Computer Progamming & Pre-AP Computer Science 2 (JAVA) or Pre-AP Computer Science 1 (Python) & AP Computer Science 1 (JAVA) or Pre-AP Computer Science 2 (JAVA) \\ \hline
Principles of Information Technology/ Principles of Art, A/V Technology and Communication & Computer Maintenance & Telecommunications and Networking & Research and IT Solutions or Practicum in Business Management    \\\hline
Introduction to engineering Design & Principles of Engineering & Digital Electronics & Engineering Drafting and Design \\\hline
Concepts of Engineering & Robotics & Principles of Technology & Engineering Mathematics \\ \hline                                    \end{tabular}
\end{table}

\subsection{Higher Education}
Preparation for college is obviously paramount in any Upper School academic program at Newman, and so it's instructive to examine the range of CS courses and subjects offered in higher education. 
\textbf{MIT} \\
Massachusetts Institue for Technology is a consistently top-ranked, globally-recognized leader in education, research, and innovation. MIT's Electrical Engineering and Computer Science (EECS) Department is the largest department at MIT and is composed of four undergraduate degree programs: Electrical Science and Engineering, Electrical Eng. \& Computer Science, Computer Science and Engineering, and Computer Science and Molecular Biology. All four tracks are required to take EECS I, an introductory electrical engineering and computer science course:
\begin{blockquote}
\textbf{6.01 Introduction to EECS I} - An integrated introduction to electrical engineering and computer science, taught using substantial laboratory experiments with mobile robots. Key issues in the design of engineered artifacts operating in the natural world: measuring and modeling system behaviors; assessing errors in sensors and effectors; specifying tasks; designing solutions based on analytical and computational models; planning, executing, and evaluating experimental tests of performance; refining models and designs. Issues addressed in the context of computer programs, control systems, probabilistic inference problems, circuits and transducers, which all play important roles in achieving robust operation of a large variety of engineered systems \cite{mit}.
\end{blockquote}
There is a close link between electrical engineering and computer science throughout MIT's undergraduate CS program. Thanks to tools like Arduinos, Raspberry Pis, VEX and LEGO robotics, and other easily-programmed microcontrollers, it's possible to develop Upper School curriculum that explores computer science through an electrical or mechanical engineering lens. As for CS fundamentals, MIT's more traditional introductory CS course is described below:
\begin{blockquote}
	\textbf{6.S04 Special Subject: Fundamentals of Programming} - Introduces fundamental concepts of programming. Designed to develop skills in applying basic methods from programming languages to abstract problems. Topics include programming and Python basics, computational concepts, software engineering, algorithmic techniques, data types, and recursion and tail recursion. Lab component will consist of software design, construction and implementation of design \cite{mit}. 
	\end{blockquote} \par
\textbf{Pomona College} \\
Pomona College, a small liberal arts college in Claremont, California, offers the perspective of a top-tier post-secondary school without an engineering department. CSCI051 is the first course in the CS sequence, and it specifies that no previous programming experience is required.
\begin{blockquote}
	\textbf{CSI051} - Introduction to the field of computer science using the object-oriented language Java. Topics include iteration and recursion, basic data structures, sorting and searching, elementary analysis of algorithms and a thorough introduction to object-oriented programming. Special emphasis on graphics, animation, event-driven programming and the use of concurrency to make more interesting programs  \cite{pomonacs1}. 
\end{blockquote}
CSCI052, the second course in the introductory series, emphasizes ``functional programming, procedural and data abstraction, recursion and problem-solving" as well as ``computer architecture and organization, finite automata and computability" \cite{pomonacs1}. These subjects are closely aligned with the CSTA benchmarks for upper level computer science.  \par 
The following goals of the Pomona CS major have been pulled from the department's website: \cite{pomona}
\begin{enumerate}
	\item To conceptualize multiple views of problems, to develop computational solutions grounded in theory, and to evaluate their solutions using a range of metrics.
	\item To work alone and in teams to identify, formulate, and solve computing problems.
	\item To gain a firm grounding in the core areas of computer science: theory, systems, programming languages, and algorithms.
	\item To apply the knowledge gained in core courses to a broad range of advanced topics in computer science, and to develop the ability to learn sophisticated technical material independently.
	\item To be able to communicate technical information both orally and in writing.
	\item To understand the theoretical, practical, and ethical ramifications of computational solutions to problems, and to be aware of current research developments in computer science.
\end{enumerate}

\section{National Standards}
\subsection{CSTA}
The Computer Science Teachers Association (CSTA) released the revised ``K-12 Computer Science Standards" in 2011, which is widely cited in the computer science education community as source of CS benchmarks. The CSTA outlines a set of learning objectives on three levels and grouped into one of five ``strands": computational thinking; collaboration; computing practice; computers and communication devices; and community, global, and ethical impacts \cite{csta}. The benchmarks begin at the elementary level and continue through high school. AP CS curriculum fits well into the level 3 CSTA sequence, but CSTA recommends additional CS courses for depth. For the list of standards, refer to Appendix \ref{AppendixCSTA}.\par
\subsection{ISTE}
The International Society for Technology in Education (ISTE) has compiled a set of standards for computer science educators \cite{iste}. These standards are listed in Appendix \ref{AppendixISTE} and are cross-referenced with CSTA benchmarks. Unlike CSTA, ISTE does not describe K-12 standards, but rather outlines a set of learning objectives that could presumably be covered in one or more advanced high school courses. When mapped to the CSTA benchmarks, ISTE standards mostly fall under level 3A (at the AP CS level) are are not particularly useful for identifying the requirements for introductory curriculum. In addition to computer science concepts, these standards layout teaching standards and strategies specific to educators and learning environments. \par
\subsection{College Board's Advanced Placement}
Since 2003 the \href{http://media.collegeboard.com/digitalServices/pdf/ap/ap-course-overviews/ap-computer-science-a-course-overview.pdf}{Advanced Placement Computer Science A} exam has tested students' ability to solve problems and design algorithms using Java. The College Board's test is intended to cover the equivalent of a first semester college computer science course. The topics include:
\begin{enumerate}
	\item Object-Oriented Program Design:  Program and class design 
	\item Program Implementation: Implementation techniques. Programming constructs, Java library classes
	\item Program Analysis: Testing, Debugging, Runtime exceptions, Program correctness, Algorithm analysis
	\item Standard Data Structures:  Primitive data types, Strings, Classes, Lists, Arrays (1-D and 2-D) 
	\item Standard Operations and Algorithms: Searching, Sorting
	\item Computing in Context: System reliability, Privacy, Legal issues and intellectual property, Social and ethical ramifications of computer use 
\end{enumerate}
In 2016 the College Board plans to release a second AP CS course, \href{https://secure-media.collegeboard.org/digitalServices/pdf/ap/ap-computer-science-principles-curriculum-framework.pdf}{AP Computer Science Principles}, that will operate in tandem to the other AP CS class. From the AP website, ``AP Computer Science Principles offers a multidisciplinary approach to teaching the underlying principles of computation." Unlike the AP CS A which relies exclusively on Java, the Principles course allows teachers to use any programming language. The course introduces key programming concepts with a ``focus on fostering students to be creative." The ``Big Ideas" covered by this exam include:
\begin{enumerate}
	\item Creativity
	\item Abstraction
	\item Data and Information
	\item Algorithms
	\item Programming
	\item Internet
	\item Global Impact
\end{enumerate} \par
\begin{table}
	\centering
	\bgroup
	\def\arraystretch{1.5}
	\begin{tabular}{ p{7cm} p{7cm} }
		\hline
		\textbf{AP Computer Science \textit{A}} &	\textbf{AP Computer Science \textit{Principles}} \\ \hline \hline
		\multicolumn{2}{l}{\textit{Curriculum:}} \\
		Focused on object-oriented programming and problem solving & Built around fundamentals of computing including problem solving, working with data, understanding the Internet, cybersecurity, and programming. \\ \hline
		\multicolumn{2}{l}{\textit{Language:}} \\
		Java is the designated programming language	& Teachers choose the programming language(s) \\ \hline
		\multicolumn{2}{l}{\textit{Skillset:}} \\
		Encourages skill development among students considering a career in computer science or other STEM fields & Encourages a broader participation in the study of computer science and other STEM fields, including AP Computer Science A \\ \hline
		\multicolumn{2}{l}{\textit{Assessment:}} \\
		Multiple-choice and free-response questions (written exam) & Two performance tasks students complete during the course to demonstrate the skills they have developed (administered by the teacher; students submit digital artifacts), and multiple-choice questions (written exam) \\ \hline
	\end{tabular}
	\egroup 
	\caption{Comparison of AP Computer Science Exams ~\cite{APcomp}} \label{tab:apexams} 
\end{table}\par
For a detailed list of learning benchmarks associated with this exam, \href{https://secure-media.collegeboard.org/digitalServices/pdf/ap/ap-computer-science-principles-curriculum-framework.pdf}{check out the AP Computer Science Principles Curriculum Framework}. \par

\textbf{PROS \& CONS OF AP CS} \\
There are merits and shortcomings of teaching Advanced Placement courses in general, as well as those that are specific to computer science. Given the 
Perhaps the most salient advantage is the potential for college credit, which may allow students to place out of introductory-level college courses and save time or money in higher education. AP courses may also positively affect college transcripts since AP courses at Newman are weighted in the student’s cumulative GPA calculation. In addition, because College Board is an internationally-recognized organization, there is a thriving community willing to offer support or share resources, curriculum, example labs, and exercises. Finally, the AP course offers a set of well-researched standards and benchmarks that, at in theory, align with equivalent college-level courses. \par
Perhaps one of the greatest criticisms of AP courses in general is the rigidity and inflexibility of the curriculum. John Tierney, a contributing writer for The Atlantic and a former professor of American government at Boston College, writes:
\begin{blockquote}
	``In short, AP courses are a forced march through a preordained subject, leaving no time for a high-school teacher to take her or his students down some path of mutual interest. The AP classroom is where intellectual curiosity goes to die" \cite{atlantic}.
	\end{blockquote}
This shortcoming is particularly stifiling and problematic in AP CS A. Given the substantial amount of theory and subject matter covered on the exam, the course affords little opportunity for project-based, open-ended discovery and expression. The AP CS A course requires Java, a language that comes with significant paradigm baggage, and limits students to the kinds of programming that can be expressed with Java. Although Java is a common language in introductory college courses, the most common teaching language at the university level as of July, 2014 is Python \cite{unilang}, a language that allows students ``to focus less on details such as types, compilers, and writing boilerplate code and more on the algorithms and data structures relevant to performing their intended tasks" \cite{guo}. And although the curriculum provides a sound introduction to the theory and mindsets of CS, the AP CS A exam renders an infinitely creative subject into a formulaic and uninventive practice, which is not the most effective approach for engaging and capturing a diverse group of students. \par 
The AP CS Principles course has the potential to mitigate many of these criticisms. The course website states that the impetus for developing the cours was the need to ``increase the number of students interested in and prepared for success in computer science and other STEM fields'' \cite{apcsfaq}. The course does not specify a specific programming language, but instead encourages students to develop ``personally relevant artifacts'' \cite{apframe}, whether these are web apps, digital music, animations, or mobile games. ``The course is unique in its focus on fostering students to be \textbf{creative}'' \cite{apframe} (the use of bold font to emphasize ``creative'' comes straight from the document).  There is also greater emphasis on appealing to a broader audience by highlighting the impacts of computational thinking on a myriad of fields, not just computer science. \par

On paper the new AP CS Principles course is the answer to the need for a college-level, nationally-recognized CS course that doesn't stifle innovation, creativity, and personalized, project-based learning. The course, however, is still young, and it may take time to answer questions such as, how will colleges respond? Is this course sufficiently rigorous preparation for college-level CS? Do the curriculum and benchmarks still afford space for creativity and exploration? Will students, particularly those from underrepresented groups, feel more inclined to take this new AP course? \par
 
As for enrollment, it's unclear how the AP designation might affect course registration at Newman. The AP CS Principles states that ``students do not need to have prior knowledge of any programming language'' \cite{apcsfaq}. Offering an AP as the introductory course may deter students who are unfamiliar with CS, particularly its creative dimension, from signing up for a rigorous course. Even if AP CS Principles is the second or third course in the CS series, there may be unpredictable impacts on registration. For example, high-achieving students who might typically take AP Biology or Chemistry electives may be more likely to take AP CS since it would offer the same GPA and transcript distinctions as other AP science or math courses, while students with a passion for computer science but who desire a less rigorous course load might shy away from an AP CS course. Another alternative- offering an AP caliber course that prepares students for an optional AP exam at the end of the semester- may cater to both groups of students. Ultimately, student feedback is necessary to determine the best course of action to maximize enrolloment. \par


\subsection{Next Generation Science Standards}
The Next Generation Science Standards (NGSS) is the product of twenty-six states and broad-based teams working to develop a new set of science standards needed to revise a 15-year-old set of documents on which most state standards are based \cite{ngsss}. Unfortunately, the latest NGSS document does not enumerate standards specific to computer science, for the reasons explained below:
\begin{blockquote}
``Computer Science and Statistics Computer science and statistics are other areas of science that are not addressed here, even though they have a valid presence in K-12 education... Computer science, too, can be seen as a branch of the mathematical sciences, as well as having some elements of engineering. But, again, because this area of the curriculum has a history and a teaching corps that are generally distinct from those of the sciences, the committee has not taken this domain as part of our charge. Once again, this omission should not be interpreted to mean that computer science or statistics should be excluded from the K-12 curriculum. There are aspects of computational and statistical thinking that must be understood and applied in learning about the sciences, and we identify these aspects, along with mathematical thinking, in our discussion of science practices in Chapter 3" \cite{ngsss}. 
\end{blockquote}\par
Although the NGSS does not explicitly outline CS benchmarks, the Engineering Design standards are highly applicable to software engineering or computational thinking projects. These benchmarks are covered in Appendix \ref{AppendixNGSS}. \par
For CS courses that are not standalone but rather are integrated into existing math or science classes, aligning curriculum with relevant NGSS standards may be advisable. Code.org has published two sets of middle school curriculum- CS in Algebra and CS in Science- that are consistent with both CSTA and NGSS standards. A table summarizing the overlap between these standards as it relates to this curriculum can be \href{https://code.org/curriculum/science}{found on their website}.

\section{Online Curriculum}
A non-exhaustive list of online coding tools and curriculum can be found in Appendix \ref{AppendixTools}. Tools are separated by level (lower, middle, and upper school). The table contains information about professional development, platform cost, student tracking, and the possibility for self-guided online learning. \par 
At the elementary school level, iPad apps (Kodable) and drag-and-drop visual programming languages (Hopscotch, Scratch, SNAP!, Tynker) teach foundational coding concepts through interactive games, art, and animations. Many of these platforms cater to teachers without computer science experience. For example, Tynker includes assessment, classroom management, lesson plans, and a built in tutor. In addition, Tynker aligns to Common Core Mathematics, Common Core ELA, and CSTA Computer Science standards \cite{tynker}. \par
Many of the elementary-level tools (Scratch, Tynker, SNAP!) can be used in more sophistocated projects at the middle school level. For integrating CS into existing middle school courses, Code.org provides 20-lesson CS in Algebra and CS in Science modules, as well as in-person or online professional development. \par
The upper school curriculum typically focuses on exploring computer science concepts with a true development language (Java, Javascript, Python, etc.). CodeAcademy and Kahn Academy use videos and cloud-coding to deliver instruction in a variety of languages, including Javascript, Ruby, Python, and more. Online AP Computer Science courses are available through CodeHS and Edhesive, each of which offer PD and student tracking.  \par
Online Global Academy, an online platform offering courses in a variety of subject areas, currently offers self-motivated Newman students the ability to take the following CS courses:
% http://www.globalonlineacademy.org/the-goa-experience/courses/
\begin{itemize}
\item Art of Code: Processing
\item Computer Programming I: Computational Thinking
\item Computer Programming I: Java
\item Computer Programming II: Advanced Java
\item Computer Programming II: Analyzing Data with Python
\item Computer Programming II: iOS Development
\end{itemize}

\textbf{ONLINE VS. CLASSROOM INSTRUCTION} \\
Online instruction offers a variety of advantages when teaching computer science, a rapidly-evolving and highly technical field. Content from online sites like Codeacademy or Kahn Academy is up-to-date, taught by subject matter experts, covers a multitude of subjects and programming languages, and frequently is accompanied by interactive games or assessments. The diversity of courses may allow self-directed students to chart academic paths that align with their personal interests. \par
Online programs are particularly noteworthy in light of the dearth of computer science teachers. Given that the tech industry is struggling to hire programmers for high-paying jobs, it's no wonder that CS teachers are hard to come by \cite{washpostcs}. Although there are ample opportunities for professional development, either through the web or in-person workshops, online learning offers schools the ability to move forward without needing CS experts. Programs like Edhesive and CodeHS provide instruction, assessments, teacher dashboards, and professional development for Intro to CS, AP CS A, and AP CS Principles.\par
The cost to bring a CS program online is another important consideration. For a small number of students, Online Global Academy is cost effective: \$500 per student per semester. This platform, however, is not scalable as a solution to meet a possible CS graduation requirement. Beyond a single section, the courses are no longer cost effective, in addition to the fact that registering more than 2-4 students is likely impossible due to competition from other schools.  \par
For a mandated CS credit, other online platforms may be significantly cheaper than hiring a full-time CS teacher. Edhesive, CodeHS, Codeacademy, and Kahn Academy are potential platforms that would allow a ``coach'' to monitor student progress online without spending time and resources developing content, grading, or teaching the course. Codeacademy and Kahn Academy are free, although they offer  with the exception of Edhesive and CodeHS, which come out to \$2000 for a school license. \par   
%%% GET COSTS OF EDHESIVE< CODEHS
%%% MUST THERE BE A TEACHER? can the teacher be doing something else; how involved is the teacher
%%% how much flexibility in the curriculum?
Students get support 7 days/week in an online forum monitored by the course instructor and TAs.
• Coaches receive the training and support they need to confidently coach a student in an unfamiliar subject. 
Coached students who completed the course earned on average a 3.3 on the 2014 AP Exam, while the national average score for the 2014 AP Computer Science Exam was a 2.95. Course instructor and Teaching Assistants provide answers to student questions 7 days a week. \par

There are a variety of potential concerns related to relying on online courses for CS instruction. The first pertains to student recruitment and retainment - particularly of women, students of color, or other any other student who may not believe CS is relevant to her or his future career paths. Can an online course capture a broad audience and inspire these students about the creative potential of CS? \par
For independent schools, the question of value added may be particularly relevant. The technology director at Greenhill School posed the question, ``Why would parents spend \$30,000 on an education their child could get at home, for free?" 
• 

Online CS instruction, from 
html, java
google code jam

7 members 
10 students last year
started last year
Mark taught everything
``if we asked them to do it, they wouldn't"
"if people wanted to learn
michael learned a lot - one or more people 
takes a very specific type of person to do Global Online Academy
not going to skype with your teacher

With a course you design yourself, you can recruit the best students regardless of background, and mold the curriculum to fit their needs and interests.

\section{Hardware Tools}
Physical coding platforms open the door to a variety of highly-engaging ways to teach coding to all ages. Robotics, wearable tech, electronic music, and interactive games are just a few examples of potential projects that can be used to teach coding or computational thinking. Please refer to Appendix \ref{AppendixHardware} for a table of tools.