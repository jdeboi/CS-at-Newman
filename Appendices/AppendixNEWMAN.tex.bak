\chapter{Appendix: Newman CS Benchmarks} % Main appendix title

\label{AppendixNEWMAN} % For referencing this appendix elsewhere, use \ref{AppendixA}

\lhead{Appendix: \emph{Newman CS Benchmarks}} % This is for the header on each page - perhaps a shortened title


Below is a list of benchmarks for PK-12 computer science at Newman. These benchmarks were compiled using CSTA (Appendix \ref{AppendixCSTA}), ISTE (Appendix \ref{AppendixISTE}), AP (Section \ref{CBAP}), CAS (Appendix \ref{AppendixCOMP}), and other online resources and benchmarks. They are broken into grade ranges. Benchmarks beyond ``US Tier 1" are optional standards that may be met by students who express interest in computer science. \par 

\textbf{PK-3rd}
\begin{enumerate}
	\item Understand that coding is the process of giving precise, step-by-step instructions to a computer in order to achieve particular goals.
	\item Use a block-based program to experiment with sequencing and loops.
	\item Decompose a problem into smaller problems.
	\item Experience coding with programmable hardware (Beebots, LEGO robotics, Makey Makey, etc.).
\end{enumerate}

\textbf{3rd-6th}
\begin{enumerate}
	\item Understand that coding is the process of giving precise, step-by-step instructions to a computer in order to achieve particular goals.
	\item Decompose a problem into smaller problems using code.
	\item Demonstrate an understanding of loops and their utility in programming.
	\item Successfully use conditional statements in a program.
	\item Use a block-based program to create a unique coding artifact.
	\item Experience coding with at least two platforms (e.g. Scratch and LEGO Mindstorms) and identify similarities between them.
	\item Experience coding with programmable hardware (Beebots, LEGO robotics, Makey Makey, etc.) and draw parallels to other coding platforms.
	\item Understand how to safely use the internet and safeguard personal information.
	\item Understand how to conduct age-appropriate research on the internet using reliable, credible sources.
\end{enumerate}

\textbf{6th-9th}
\begin{enumerate}
	\item Demonstrate an understanding of loops and their utility in programming.
	\item Successfully use conditional statements in a program.
	\item Decompose a problem into smaller problems using code.
	\item Demonstrate an understanding of primitive data types and the utility of variables in coding.
	\item Write functions and explain their utility in computer programs.
	\item Experience programming with at least one text-based programming language.
	\item Effectively use modeling and simulation with a programming language to solve real-world problems.
	\item Create a unique coding artifact with block or text-based programming language.
	\item Articulate a variety of potential applications of coding in various fields and disciplines.
	\item Understand how to safely and ethically use the internet (particularly as it relates to social media and new platforms for online interaction).
	\item Describe strategies for determining the reliability of information found on the Internet.
\end{enumerate}

\textbf{US Tier 1 (minimum graduation requirement)}
\begin{enumerate}
	\item Understand abstraction and its importance in problem solving.
	\item Demonstrate proficiency with standard data structures: primitive data types, Strings, Arrays (1-D and 2-D).
	\item Understand variables and variable scope.
	\item Effectively write functions and pass parameters, and understand the importance of functions in abstraction.
	\item Effectively use sequential, conditional, and iterative control structures.
	\item Demonstrate proficiency with boolean expressions.
	\item Use a standard programming language to create a unique coding artifact.
	\item Understand binary representation- representing names, objects or ideas as sequences of 0s and 1s.
	\item Evaluate programs written by others for readability and usability.
	\item Understand types of programming errors and develop effective strategies for debugging code.
	\item Use markup languages (HTML, CSS) and Javascript to develop simple web pages.
	\item Identify a myriad of jobs and disciplines related to CS.
	\item Describe ethical issues that relate to computers and networks (e.g., security, privacy, ownership, and information sharing).
\end{enumerate}

\textbf{US Tier 2}
\begin{enumerate}
	\item Understand encasulation and demonstrate proficiency with object oriented programming (prototypes or classes)
	\item Develop an understanding of inheritance and polymorphism.
	\item Understand and implement recursion.
	\item Understand hexadecimal notation and demonstrate and understanding of data representation at the machine level.
	\item Understand command line basics.
	\item Use various debugging and testing methods to ensure program correctness.
	\item Analyze and manipulate large data sets using a programming language.
	\item Use Application Program Interfaces (APIs) and libraries to facilitate programming solutions.
	\item Use version control (Git) to collaborate on group projects.
	\item Effectively use modeling and simulation to solve real-world problems.
	\item Differentiate among open source, freeware, and proprietary software licenses.
	\item Understand and explain how the internet functions.
	\item Identify existing cybersecurity concerns and potential options to mitigate these issues.
\end{enumerate}

\textbf{US Tier 3}
\begin{enumerate} %TODO Big O? time complexity
	\item Understand more advanced data structures - array lists, linked lists, stacks, queues, etc.
	\item Design and implement searching (linear and binary) and sorting algorithms (bubble, selection, insertion, and merge sort)
	\item Analyze algorithms by considering complexity, efficiency, aesthetics, and correctness.
	\item Explain how sequence, selection, iteration, and recursion are building blocks of algorithms. 
	\item Classify problems as tractable, intractable, or computationally unsolvable.
	\item Explain the value of heuristic algorithms to approximate solutions for intractable problems.
	\item Understand data compression: lossless (Huffman coding) and lossy compression algorithms (example JPEG).
	\item Describe a variety of programming languages available to solve problems and develop systems.
	\item Understand basic computer architecture: CPU, storage (e.g. hard disk, main memory), input/output (e.g. mouse, keyboard).
	\item Understand networks: basic components (e.g., servers, file protection, routing, spoolers and queues, shared resources, and fault-tolerance) and issues that impact network functionality (e.g., latency, bandwidth, firewalls, server capability).
\end{enumerate}

\textbf{US Tier 4}
\begin{enumerate}
	\item Understand and implement advanced data structures: trees, graphs, hash tables, etc.
	\item Understand twoâ€™s complement signed integers.
	\item Understand problems of using discrete binary representations (e.g. quantization, representing fractions).
	\item Demonstrate knowledge of varied software development models (MVC) and project management strategies.
	\item Explore multiple programming paradigms (e.g. functional vs. object-oriented).
	\item Deploy principles of security by implementing encryption and authentication strategies.
	\item Demonstrate concurrency by separating processes into threads and dividing data into parallel streams.
	\item Use persistent data storage (writing files, SQL and non-relational databases, etc.).
\end{enumerate}